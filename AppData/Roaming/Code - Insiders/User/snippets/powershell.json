{
	// Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }
    "WriteVerboseVerbose": {
        "prefix": "wvv",
        "body": [
            "Write-Verbose \"${0:message}\" -Verbose"
        ],
        "description": "Write-Verbose -Verbose"
    },
    "CommentBasedHelp": {
      "prefix": "help",
      "body":[
        "<#",
        "    .SYNOPSIS",
        "        ${0:short description}",
        "    .DESCRIPTION",
        "        ${1:long description}",
        "    .EXAMPLE",
        "        ${2:example usage}",
        "",
        "        ${3:explanation}",
        "#>"
      ],
      "description": "Minimal comment-based help"
    },
    "Mandatory": {
        "prefix": "Mandatory",
        "body": [
            "[Parameter(Mandatory)]"
        ],
        "description": "[Parameter(Mandatory)]"
    },
    "PSCustomObject": {
        "prefix": "PSCustomObject",
        "body": [
            "[PSCustomObject]@{",
            "    PSTypeName = '${1:typename}'",
            "    ${2:property} = \"${3:value}\"",
            "$0}"
        ],
        "description": "Creates a custom PSObject with a fake typename"
    },
    "Describe": {
        "prefix": "Describe",
        "body": [
            "#requires -Module ${1:ModuleName}",
            "using module ${1:ModuleName}",
            "",
            "Describe ${2:CommandName} {",
            "    . $$PSScriptRoot\\..\\Assertions\\ShouldHaveAParameter.ps1",
            "    $$Command = InModuleScope ${1:ModuleName} { Get-Command '${2:CommandName}' }",
            "",
            "    & (Get-Module Pester) ([ScriptBlock]::Create('using module ${1:ModuleName}'))",
            "",
            "    $$PSDefaultParameterValues = @{",
            "       'Mock:ModuleName'              = '${1:ModuleName}'",
            "       'Assert-MockCalled:ModuleName' = '${1:ModuleName}'",
            "    }",
            "",
            "    Context 'Parameter Validation' {",
            "        It 'Requires a ${3:Parameter} parameter' {",
            "            $$Command | Should -HaveAMandatoryParameter ${3:Parameter} -OfType 'string'",
            "        }",
            "    }",
            "",
            "    $0",
            "}"
        ],
        "description":"Describe a function in a module for Pester"
        }
    }
}
